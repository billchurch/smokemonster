substitutions:
  device_name: smoketest
  device_description: Smoke Test
  friendly_name: smoketest
  puck_interval: 20min
  puck_motor_delay: 12s
  prime_delay: 14s
  ir_dwell: 5.5sec

binary_sensor:
# puck chucker position IR sensor, update template sensor
# This sensor will turn off the puck_chucker_advance motor 
# after ${ir_dwell} time. The intention is to park it 180 
# degrees from a full extension. We also want to reset any
# binary sensors to a known state and increment the "num_chucks"
# sensor to keep track of how many cycles we've gone through.
# IR beam break sensor array:
# 1      2           3                    4
# black  red         orange               black
# gnd    ir_beam     ir_recv              gnd
#        1kOhmR->5v  GPIO_27+370OhmR->5v
# documented
- platform: gpio
  pin: GPIO27
  id: puck_ir
  internal: true
  on_press:
    then:
    - delay: ${ir_dwell}
    - switch.turn_off: puck_chucker_advance
    - sensor.template.publish:
        id: ${device_name}_num_chucks
        state: !lambda 'return (id(${device_name}_num_chucks).state + 1);'
    - if:
        condition: 
          switch.is_on: chucker_reset
        then:
          switch.turn_off: chucker_reset
    - if:
        condition:
          sensor.in_range:
            id: ${device_name}_num_chucks
            above: 3
        then:
          - binary_sensor.template.publish: 
              id: ${device_name}_chucker_primed
              state: ON

# This sensor tells us that 3 pucks are present in the smoke
# generator path. 3 are required to begin the smoke operation.
# documented
- platform: template
  id: ${device_name}_chucker_primed
  name: "${friendly_name} Chucker Primed"

# Reports if this device is Connected or not
# documented
- platform: status
  name: ${friendly_name} Status

output:
# blue - heater - 40A SSR
# This is the main heater element for the smoker box. This
# is controlled by the climate pid controller. In my version
# I have 2 x 500w elements, one of the two can be switched
# off manually... I may decide to make this controllable by
# smokemonster eventually.
# We are using "slow_pwm" here as the climate pid component
# requires a PWM output. 
# documented
  - platform: slow_pwm
    pin: GPIO13 
    id: heater
    period: 3s

switch:
# rotates the Puck Chucker until the IR sensor triggers
# useful to get back in sync...  
# documented
  - platform: template
    id: chucker_reset
    internal: true
    optimistic: on
    turn_on_action:
      - switch.turn_on: puck_chucker_advance

# activates "puck_chucker_advance" until the binary_sensor
# "chucker_primed" is on (3 pucks in the smoke generator)
# documented
  - platform: template
    id: chucker_prime
    internal: true
    optimistic: on
    turn_on_action:
      then:
        - while:
            condition: 
              binary_sensor.is_off: ${device_name}_chucker_primed
            then: 
              - switch.turn_on: puck_chucker_advance
              - delay: ${prime_delay}
        - wait_until:
              binary_sensor.is_on: ${device_name}_chucker_primed            

# enables the PID autotune feature
# documented
  - platform: template
    name: "${friendly_name} PID Autotune"
    id: ${device_name}_pid_autotune
    turn_on_action:
      - climate.pid.autotune: ${device_name}_pid_smoker

# green - puck chucker - 25A SSR
# JUN TUO TY-50B E212993
# 110-120v 4W electric motor 
# 5/6 r/min CW/CCW 
# documented
  - platform: gpio
    pin: GPIO17
    id: puck_chucker_advance
    restore_mode: ALWAYS_OFF
    internal: true
    on_turn_on:
      then:
        # when we turn on, we wait ${puck_motor_delay} and
        # check to see if we've already been turned off
        # if we haven't, it means the IR sensor has failed, 
        # we need to stop and raise an error.
        # If we were successfully turned off by the IR sensor,
        # then we need to check if we had a previous failure,
        # and clear it.
        - delay: ${puck_motor_delay}
        - if:
            condition: 
              switch.is_on: puck_chucker_advance
            then:
              - switch.turn_off: puck_chucker_advance
              - text_sensor.template.publish:
                  id: ${device_name}_puck_chucker_errors
                  state: "NO_IR"
            else: 
                - if: 
                    condition:
                     text_sensor.state:
                        id: ${device_name}_puck_chucker_errors
                        state: "NO_IR"
                    then: 
                      - text_sensor.template.publish:
                          id: ${device_name}_puck_chucker_errors
                          state: "OK"
# The smoke generator "program"
# Turn on the heater, make sure we have 3 pucks loaded
# Mother_Chucker is responsible for dispensing a new puck
# every ${puck_interval}.
# documented
  - platform: template
    name: "${friendly_name} Smoke Generator"
    id: ${device_name}_smoke_generator
    optimistic: on
    turn_on_action:
      - switch.turn_on: ${device_name}_smoke_generator_heat
      - switch.turn_on: chucker_prime
      - wait_until:
          binary_sensor.is_on: ${device_name}_chucker_primed
      - switch.turn_on: mother_chucker
    turn_off_action:
      then:
      - switch.turn_off: ${device_name}_smoke_generator_heat            
      - switch.turn_off: mother_chucker

# While the ${device_name}_smoke_generator is on, this will dispense a new
# puck every ${puck_interval}
# documented
  - platform: template
    id: mother_chucker
    internal: true
    turn_on_action:
      - while: 
          condition: 
            switch.is_on: ${device_name}_smoke_generator
          then:
            - delay: ${puck_interval}
            - switch.turn_on: puck_chucker_advance
  
# yellow - smoke generator heater - 40A SSR
# 120v 125W heating element
# reaches roughly 500*F, this causes the puck to burn
# and produce smoke
# documented
  - platform: gpio
    pin: GPIO16
    name: "${friendly_name} Smoke Generator Heater"
    id: ${device_name}_smoke_generator_heat
    restore_mode: ALWAYS_OFF

  - platform: restart
    name: "${device_description} Restart"

### Switch to reset integral term for PID calculation ###
  - platform: template
    name: "${friendly_name} Reset Integral"
    turn_on_action:
      - climate.pid.reset_integral_term: ${device_name}_pid_smoker

sensor:
# keep track of how many puck advance cycles we've had good for
# statistics and also used to know if the smoke generator is
# "primed"
# documented
  - platform: template
    id: ${device_name}_num_chucks
    name: "${friendly_name} Number of Chucks"
    update_interval: 10s
    accuracy_decimals: 0
    unit_of_measurement: Count

# we grab the outside temperature from HA to display on the...display
# may use this at some point to pro-actively adjust temperature...
# documented
  - platform: homeassistant
    id: outside_temperature
    entity_id: sensor.home_temp
    internal: true

# the main cooking chamber temperature. PT100 Platinum Sensor, good up
# too 550*C. About 4x more than what this chamber will ever see
# documented
  - platform: max31865
    internal: false
    name: ${friendly_name}_temp1
    id: ${device_name}_temp1
    cs_pin: GPIO5
    reference_resistance: 430
    rtd_nominal_resistance: 100
    rtd_wires: 3
    filters:
      - exponential_moving_average:
         alpha: 0.09
# this being set to 60 may have caused me an issue with the PID loop
# not sure yet, re-running a quick PID tune. It does produce a lot
# of traffic on the debug log though, which stinks.
         send_every: 1
    update_interval: 1s

  # PID stuff
  - platform: pid
    name: "${friendly_name} PID Result"
    type: RESULT
  - platform: pid
    name: "${friendly_name} PID Integral Term"
    type: INTEGRAL
  - platform: pid
    name: "${friendly_name} PID Derivative Term"
    type: DERIVATIVE
  - platform: pid
    name: "${friendly_name} PID Proportional"
    type: PROPORTIONAL
  - platform: pid
    name: "${friendly_name} PID P Coefficient"
    id: kp
    type: KP
  - platform: pid
    name: "${friendly_name} PID I Coefficient"
    id: ki
    type: KI
  - platform: pid
    name: "${friendly_name} PID D Coefficient"
    id: kd
    type: KD
  - platform: pid
    name: "${friendly_name} PID Output"
    type: HEAT

# Reports how long the device has been powered (in minutes)
  - platform: uptime
    name: ${friendly_name} Uptime
    filters:
      - lambda: return x / 60.0;
    unit_of_measurement: minutes
# Reports the WiFi signal strength
  - platform: wifi_signal
    name: ${friendly_name} Signal
    update_interval: 60s

# this controls the main element and chamber temperature
# documented
climate:
  - platform: pid
    visual:
      min_temperature: 150 °F
      max_temperature: 350 °F
      temperature_step: 1 °F  
    id: ${device_name}_pid_smoker
    name: "${friendly_name}"
    sensor: ${friendly_name}_temp1
    default_target_temperature: 225°F
    heat_output: heater
    control_parameters:
      kp: 0.06629
      ki: 0.00016
      kd: 6.83407
# Tuning params
      # kp: 0
      # ki: 0
      # kd: 0
      # initial parameters
      # kp: 0.05223
      # ki: 0.00010
      # kd: 3.82207
# Rule 'Some Overshoot PID':
# never reaches temp, about 10* or so below
      # kp: 0.02899
      # ki: 0.00006
      # kd: 9.97182      
      # min_integral: 0
      # max_integral: 0
# Rule 'Ziegler-Nichols PI':
# wildly overshoots so far, +40*
#       kp: 0.03917
#       ki: 0.00005
#       kd: 0.00000
# # Rule 'Pessen Integral PID':
#   kp: 0.06094, ki: 0.00015, kd: 9.43280
# Rule 'No Overshoot PID':
#   kp: 0.01741, ki: 0.00003, kd: 5.61476


# [13:30:39][D][pid.autotune:180]:   Status: Trying to reach 106.97 °C
# [13:30:39][D][pid.autotune:181]:   Stats so far:
# [13:30:39][D][pid.autotune:182]:     Phases: 5
# [13:30:39][D][pid.autotune:183]:     Detected 4 zero-crossings
# [13:30:39][D][pid.autotune:185]:     Current Phase Min: -11.76, Max: -0.77
# [13:30:39][D][sensor:092]: 'smokemonster Signal': Sending state -81.00000 dB with 0 decimals of accuracy
# [13:30:41][D][sensor:092]: 'Chamber Temperature': Sending state 105.54110 °C with 2 decimals of accuracy
# [13:30:41][I][pid.autotune:119]: PID Autotune finished!
# [13:30:41][I][pid.autotune:134]: PID Autotune:
# [13:30:41][I][pid.autotune:136]:   State: Succeeded!
# [13:30:41][W][pid.autotune:144]:   Oscillation Frequency is not symmetrical. PID parameters may be inaccurate!
# [13:30:41][W][pid.autotune:147]:     This is usually because the heat and cool processes do not change the temperature at the same rate.
# [13:30:41][W][pid.autotune:149]:     Please try reducing the positive_output value (or increase negative_output in case of a cooler)
# [13:30:41][I][pid.autotune:157]:   Calculated PID parameters ("Ziegler-Nichols PID" rule):
# [13:30:41][I][pid.autotune:158]:  
# [13:30:41][I][pid.autotune:159]:   control_parameters:
# [13:30:41][I][pid.autotune:160]:     kp: 0.05223
# [13:30:41][I][pid.autotune:161]:     ki: 0.00010
# [13:30:41][I][pid.autotune:162]:     kd: 6.73772
# [13:30:41][I][pid.autotune:163]:  
# [13:30:41][I][pid.autotune:164]:   Please copy these values into your YAML configuration! They will reset on the next reboot.
# [13:30:41][D][pid.autotune:170]:   Alternative Rules:
# [13:30:41][D][pid.autotune:200]:     Rule 'Ziegler-Nichols PI':
# [13:30:41][D][pid.autotune:201]:       kp: 0.03917, ki: 0.00005, kd: 0.00000
# [13:30:41][D][pid.autotune:200]:     Rule 'Pessen Integral PID':
# [13:30:41][D][pid.autotune:201]:       kp: 0.06094, ki: 0.00015, kd: 9.43280
# [13:30:41][D][pid.autotune:200]:     Rule 'Some Overshoot PID':
# [13:30:41][D][pid.autotune:201]:       kp: 0.02899, ki: 0.00006, kd: 9.97182
# [13:30:41][D][pid.autotune:200]:     Rule 'No Overshoot PID':
# [13:30:41][D][pid.autotune:201]:       kp: 0.01741, ki: 0.00003, kd: 5.61476
# [13:30:41][D][sensor:092]: 'PID Result': Sending state 0.00000 % with 1 decimals of accuracy
# [13:30:41][D][sensor:092]: 'PID Integral Term': Sending state 0.00000 % with 1 decimals of accuracy
# [13:30:41][D][sensor:092]: 'PID Derivative Term': Sending state 0.00000 % with 1 decimals of accuracy
# [13:30:41][D][sensor:092]: 'PID Proportional': Sending state 0.00000 % with 1 decimals of accuracy
# [13:30:41][D][sensor:092]: 'PID P Coefficient': Sending state 0.05223 % with 1 decimals of accuracy
# [13:30:41][D][sensor:092]: 'PID I Coefficient': Sending state 0.00010 % with 1 decimals of accuracy
# [13:30:41][D][sensor:092]: 'PID D Coefficient': Sending state 6.73772 % with 1 decimals of accuracy
# [13:30:41][D][sensor:092]: 'PID Output': Sending state 0.00000 % with 1 decimals of accuracy



# [11:03:38][D][climate:282]:   Target Temperature: 107.22°C
# [11:03:39][D][sensor:092]: 'Chamber Temperature': Sending state 106.93694 °C with 2 decimals of accuracy
# [11:03:39][I][pid.autotune:119]: PID Autotune finished!
# [11:03:39][I][pid.autotune:134]: PID Autotune:
# [11:03:39][I][pid.autotune:136]:   State: Succeeded!
# [11:03:39][W][pid.autotune:144]:   Oscillation Frequency is not symmetrical. PID parameters may be inaccurate!
# [11:03:39][W][pid.autotune:147]:     This is usually because the heat and cool processes do not change the temperature at the same rate.
# [11:03:39][W][pid.autotune:149]:     Please try reducing the positive_output value (or increase negative_output in case of a cooler)
# [11:03:39][I][pid.autotune:157]:   Calculated PID parameters ("Ziegler-Nichols PID" rule):
# [11:03:39][I][pid.autotune:158]:  
# [11:03:39][I][pid.autotune:159]:   control_parameters:
# [11:03:39][I][pid.autotune:160]:     kp: 0.06629
# [11:03:39][I][pid.autotune:161]:     ki: 0.00016
# [11:03:39][I][pid.autotune:162]:     kd: 6.83407
# [11:03:39][I][pid.autotune:163]:  
# [11:03:39][I][pid.autotune:164]:   Please copy these values into your YAML configuration! They will reset on the next reboot.
# [11:03:39][D][pid.autotune:170]:   Alternative Rules:
# [11:03:39][D][pid.autotune:200]:     Rule 'Ziegler-Nichols PI':
# [11:03:39][D][pid.autotune:201]:       kp: 0.04971, ki: 0.00007, kd: 0.00000
# [11:03:39][D][pid.autotune:200]:     Rule 'Pessen Integral PID':
# [11:03:39][D][pid.autotune:201]:       kp: 0.07733, ki: 0.00023, kd: 9.56770
# [11:03:39][D][pid.autotune:200]:     Rule 'Some Overshoot PID':
# [11:03:39][D][pid.autotune:201]:       kp: 0.03679, ki: 0.00009, kd: 10.11443
# [11:03:39][D][pid.autotune:200]:     Rule 'No Overshoot PID':
# [11:03:39][D][pid.autotune:201]:       kp: 0.02210, ki: 0.00005, kd: 5.69506
# [11:03:39][D][sensor:092]: 'PID Result': Sending state 52.29961 % with 1 decimals of accuracy
# [11:03:39][D][sensor:092]: 'PID Integral Term': Sending state 51.18217 % with 1 decimals of accuracy
# [11:03:39][D][sensor:092]: 'PID Derivative Term': Sending state 0.00000 % with 1 decimals of accuracy
# [11:03:39][D][sensor:092]: 'PID Proportional': Sending state 1.11744 % with 1 decimals of accuracy
# [11:03:39][D][sensor:092]: 'PID P Coefficient': Sending state 0.06629 % with 1 decimals of accuracy
# [11:03:39][D][sensor:092]: 'PID I Coefficient': Sending state 0.00016 % with 1 decimals of accuracy
# [11:03:39][D][sensor:092]: 'PID D Coefficient': Sending state 6.83407 % with 1 decimals of accuracy
# [11:03:39][D][sensor:092]: 'PID Output': Sending state 52.29961 % with 1 decimals of accuracy
# [11:03:39][D][climate:262]: 'Electric Grill' - Sending state:

time:
  - platform: homeassistant
    id: my_time
  
text_sensor:
# Reports the ESPHome Version with compile date
- platform: version
  name: ${friendly_name} ESPHome Version

# log any time a puck advance takes longer than it should
# we assume that the IR sensor did not detect the cycle and
# we will want to know about this for troubleshooting the
# hardware
# documented
- platform: template
  name: "${friendly_name} Puck Chucker Errors"
  id: ${device_name}_puck_chucker_errors

# documented
esphome:
  name: ${device_name}
  comment: ${device_description}
  platform: ESP32
  board: wemos_d1_mini32
  on_boot: 
    priority: -100
    # set these to some known, sane values
    # may want to do something with this later to gracefully
    # recover if we rebooted or something during a cook
    # right now, there's no state between reboots
    then:
      - binary_sensor.template.publish: 
          id: ${device_name}_chucker_primed
          state: OFF
      - sensor.template.publish:
          id: ${device_name}_num_chucks
          state: '0'
      - text_sensor.template.publish:
          id: ${device_name}_puck_chucker_errors
          state: "OK"
      - switch.turn_on: chucker_reset

# web_server:
#  port: 80

wifi:
  use_address: ${device_name}
  domain: !secret domain
  power_save_mode: none
  ssid: !secret wifissid
  password: !secret wifipass
  reboot_timeout: 0s
  # fast_connect: on #we only have one WiFi AP so just use the first one that matches
  ap:
    ssid: "${device_name} Fallback Hotspot"
    password: !secret wifipass

# Enable logging
logger:
  baud_rate: 0
  level: DEBUG
  logs:
    sensor: INFO
    climate: DEBUG
#  logs:
    i2c: DEBUG
    
ota:
  password: !secret otapass

api:
  password: !secret ha_api
  reboot_timeout: 0s

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: True

spi:
  miso_pin: GPIO19
  mosi_pin: GPIO23
  clk_pin: GPIO18

font:
  - file: 'slkscr.ttf'
    id: font1
    size: 8

  - file: 'BebasNeue-Regular.ttf'
    id: font2
    size: 48

  - file: 'arial.ttf'
    id: font3
    size: 14

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    lambda: |-
      // Print "SmokeMonster" in top center.
      it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "SmokeMonster");

      // Print time in HH:MM format
      it.strftime(0, 60, id(font2), TextAlign::BASELINE_LEFT, "%I:%M", id(my_time).now());

      // Print inside temperature (from homeassistant sensor)
      it.printf(127, 23, id(font3), TextAlign::TOP_RIGHT , "%.1f°", id(${friendly_name}_temp1).state* (9.0/5.0) + 32.0);

      // Print outside temperature (from homeassistant sensor)
      if (id(outside_temperature).has_state()) {
        it.printf(127, 60, id(font3), TextAlign::BASELINE_RIGHT , "%.1f°", id(outside_temperature).state);
      }